{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/editor.ts","src/elements/bg-editable.ts","src/elements/block.ts","src/elements/editable.ts","src/elements/file-upload.ts","src/elements/image.ts","src/elements/line.ts","src/elements/text.ts"],"names":[],"mappings":"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","file":"static-edit.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import {Block} from './elements/block'\nimport {Line} from './elements/line'\nimport {Image} from './elements/image'\nimport {Editable} from './elements/editable'\nimport {BgEditable} from \"./elements/bg-editable\";\n\nexport type Options = {\n    saveButton: boolean,\n    selector: string,\n    bgSelector: string,\n}\n\nexport class Editor {\n    private editing: boolean\n    private elems: Editable[]\n    private selector: string = '.editable'\n    private bgSelector: string = '.bg-editable'\n\n    constructor(private options: Options) {\n        this.handleOptions()\n\n        this.elems = []\n\n        let elems: Array<Element> = Array.from(document.querySelectorAll(this.selector))\n        elems = elems.concat(Array.from(document.querySelectorAll(this.bgSelector)))\n\n        for (let i = 0; i < elems.length; ++i) {\n            let elm: Editable\n            let htmlElement: HTMLElement = <HTMLElement>elems[i];\n\n            if (htmlElement.matches(this.bgSelector)) {\n                elm = new BgEditable(htmlElement, this)\n            } else if (elems[i].tagName === 'P') {\n                elm = new Block(htmlElement, this)\n            } else if (elems[i].tagName === 'IMG') {\n                elm = new Image(htmlElement, this)\n            } else {\n                elm = new Line(htmlElement, this)\n            }\n\n            elm.bindEvents()\n            this.elems.push(elm)\n        }\n    }\n\n    handleOptions() {\n        if (this.options.saveButton === true) {\n            this.createSaveButton()\n        }\n\n        if (this.options.selector !== undefined) {\n            this.selector = this.options.selector\n        }\n    }\n\n    editionStarted(elem: HTMLElement, oldValue: string) {\n        if (this.editing) {\n            return false\n        }\n\n        this.editing = true\n\n        window.dispatchEvent(new CustomEvent('static_edit.editing', {detail: {elem, oldValue}}))\n\n        return true\n    }\n\n    editionEnded(elem: HTMLElement, oldValue: string, newValue: string) {\n        this.editing = false\n\n        window.dispatchEvent(new CustomEvent('static_edit.edited', {detail: {elem, oldValue, newValue}}))\n    }\n\n    private createSaveButton() {\n        const button = document.createElement('button')\n        button.addEventListener('click', (e) => {\n            e.preventDefault()\n            e.stopPropagation()\n\n            window.dispatchEvent(\n                new CustomEvent('static_edit.saving', {detail: {changed: this.elems.filter((e) => e.hasChanged)}})\n            )\n        })\n\n        button.textContent = 'Save'\n        button.style.position = 'absolute'\n        button.style.top = '20px'\n        button.style.left = '20px'\n        document.body.appendChild(button)\n    }\n}\n","import {FileUpload} from \"./file-upload\";\n\nexport class BgEditable extends FileUpload {\n\n    get value(): string {\n        return this.elem.style.backgroundImage\n    }\n\n    protected changeValue(value, name): void {\n        this.elem.dataset.fileName = name\n        this.elem.style.backgroundImage = `url(${value})`\n    }\n}","import {Text} from \"./text\";\n\nexport class Block extends Text {\n    createField(): HTMLInputElement {\n        return <any>document.createElement('textarea')\n    }\n}\n","import {Editor} from '../editor'\n\nexport abstract class Editable {\n    protected elem: HTMLElement\n    protected editor: Editor\n    protected changed: boolean\n\n    constructor(elem: HTMLElement, editor: Editor) {\n        this.elem = elem\n        this.editor = editor\n    }\n\n    get element(): HTMLElement {\n        return this.elem\n    }\n\n    get hasChanged(): boolean {\n        return this.changed\n    }\n\n    abstract get value(): string\n\n    abstract createField(): HTMLInputElement\n\n    abstract bindEvents(): void\n}\n","import {Editable} from \"./editable\"\n\ninterface FileReaderEventTarget extends EventTarget {\n    result: string\n}\n\nexport abstract class FileUpload extends Editable {\n    createField(): HTMLInputElement {\n        const input = document.createElement('input')\n\n        input.type = 'file'\n        input.style.display = 'none'\n\n        return input\n    }\n\n    bindEvents() {\n        this.elem.addEventListener('click', (e) => {\n            e.stopPropagation()\n            e.preventDefault()\n\n            const file = this.createField()\n            file.addEventListener('change', () => {\n                const uploadedFile = file.files[0]\n                if (!!uploadedFile.type.match(/image.*/)) {\n                    const reader = new FileReader()\n                    reader.addEventListener('loadend', (e: ProgressEvent) => {\n                        const newValue = (<FileReaderEventTarget>e.target).result\n                        const oldValue = this.value\n\n                        this.changeValue(newValue, uploadedFile.name)\n                        this.changed = true\n\n                        this.elem.parentNode.removeChild(file)\n\n                        setTimeout(() => this.editor.editionEnded(this.elem, oldValue, newValue), 100)\n                    })\n\n                    reader.readAsDataURL(uploadedFile)\n                }\n            })\n\n            this.elem.parentNode.appendChild(file)\n            file.click()\n        })\n    }\n\n    protected abstract changeValue(value, name): void\n}\n","import {FileUpload} from \"./file-upload\";\n\nexport class Image extends FileUpload {\n    elem: HTMLImageElement\n\n    get value(): string {\n        return this.elem.src\n    }\n\n    changeValue(value, name): void {\n        this.elem.src = value\n        this.elem.dataset.fileName = name\n    }\n}\n","import {Text} from \"./text\";\n\nexport class Line extends Text {\n    createField(): HTMLInputElement {\n        return document.createElement('input')\n    }\n}\n","import {Editable} from \"./editable\";\n\nexport abstract class Text extends Editable {\n    get value(): string {\n        return this.elem.textContent\n    }\n\n    bindEvents() {\n        this.elem.addEventListener('click', (e) => {\n            e.stopPropagation()\n            e.preventDefault()\n            e.cancelBubble = true\n\n            if (!this.editor.editionStarted(this.elem, this.elem.innerText)) {\n                return false\n            }\n\n            const input = this.createField()\n            input.value = this.elem.innerText\n\n            input.addEventListener('blur', () => {\n                const oldValue = this.elem.innerText\n                const newValue = input.value\n\n                this.elem.innerText = newValue\n                this.changed = true\n                input.parentNode.replaceChild(this.elem, input)\n\n                // Make sure that no one triggers a new click on an editable while this is running\n                setTimeout(() => this.editor.editionEnded(this.elem, oldValue, newValue), 100)\n            })\n\n            input.addEventListener('click', (e) => {\n                e.stopPropagation()\n                e.preventDefault()\n            })\n\n            let resize = () => {\n                input.style.height = 'auto'\n                input.style.height = `${input.scrollHeight}px`\n            }\n\n            // Workaround for cut, paste, drop and keydown\n            let delayedResize = () => window.setTimeout(resize, 0)\n\n            input.addEventListener('change', resize)\n            input.addEventListener('cut', delayedResize)\n            input.addEventListener('paste', delayedResize)\n            input.addEventListener('drop', delayedResize)\n            input.addEventListener('keydown', delayedResize)\n\n            input.style.width = 'auto'\n            input.style.height = `${this.elem.offsetHeight}px`\n            input.style.overflowY = \"hidden\"\n            input.style.fontSize = window.getComputedStyle(this.elem).fontSize\n\n            this.elem.parentNode.replaceChild(input, this.elem)\n            input.focus()\n            resize()\n        }, true)\n    }\n}"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}